"""empty message

Revision ID: f3e335cc74ff
Revises:
Create Date: 2024-01-11 20:24:46.298746

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "f3e335cc74ff"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "advertisements_mainlink",
        sa.Column("link", sa.String(), nullable=False),
        sa.Column("visited", sa.Boolean(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created", sa.DateTime(), nullable=False),
        sa.Column("updated", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("link"),
        schema="homedigger",
    )
    op.create_table(
        "rent_office",
        sa.Column("title", sa.String(length=200), nullable=False),
        sa.Column("link", sa.String(length=100), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created", sa.DateTime(), nullable=False),
        sa.Column("updated", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("title", "link"),
        schema="homedigger",
    )
    op.create_table(
        "user",
        sa.Column("username", sa.String(length=100), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created", sa.DateTime(), nullable=False),
        sa.Column("updated", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_user_username"), "user", ["username"], unique=True)
    op.create_table(
        "advertisements",
        sa.Column("title", sa.String(length=200), nullable=False),
        sa.Column("link", sa.String(length=200), nullable=False),
        sa.Column("price", sa.Integer(), nullable=False),
        sa.Column("parking", sa.Boolean(), nullable=True),
        sa.Column("rooms", sa.Integer(), nullable=False),
        sa.Column("size", sa.Integer(), nullable=False),
        sa.Column("rent_office_id", sa.UUID(), nullable=True),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created", sa.DateTime(), nullable=False),
        sa.Column("updated", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["rent_office_id"],
            ["homedigger.rent_office.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "title",
            "link",
            "price",
            "parking",
            "rooms",
            "size",
            "rent_office_id",
        ),
        schema="homedigger",
    )
    op.create_table(
        "user_access_history",
        sa.Column(
            "event",
            sa.Enum(
                "TOKEN_GENERATED",
                "TOKEN_REFRESHED",
                "USER_CREATED",
                name="events",
            ),
            nullable=False,
        ),
        sa.Column("ip", sa.String(), nullable=False),
        sa.Column("user_agent", sa.String(length=100), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=True),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created", sa.DateTime(), nullable=False),
        sa.Column("updated", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "user_details",
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("birthday", sa.DateTime(), nullable=False),
        sa.Column("email", sa.String(length=100), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=True),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created", sa.DateTime(), nullable=False),
        sa.Column("updated", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_user_details_email"), "user_details", ["email"], unique=True
    )
    op.create_index(
        op.f("ix_user_details_name"), "user_details", ["name"], unique=False
    )
    op.create_table(
        "user_secrets",
        sa.Column("secret", sa.String(), nullable=False),
        sa.Column("salt", sa.String(), nullable=False),
        sa.Column("personal_key", sa.String(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=True),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created", sa.DateTime(), nullable=False),
        sa.Column("updated", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    pass
